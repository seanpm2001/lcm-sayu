version: 2.1
orbs:
  openjdk-install: cloudesire/openjdk-install@1.2.3
  aws-cli: circleci/aws-cli@0.1.4

executors:
  linux-executor:
    machine: true
    resource_class: medium
    working_directory: ~/repo
    environment:
      GRADLE_OPTS: -Dorg.gradle.daemon=false
      TERM: dumb
      GRAALVM_HOME: /home/circleci/repo/.graalvm
  graalvm-java11:
    docker:
      - image: oracle/graalvm-ce:20.2.0-java11

jobs:
  build:
    executor: graalvm-java11
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install yarn
          command: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run:
          name: Install npm
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v14.10.1
            nvm alias default v14.10.1
      - run:
          name: UI Tests
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npx yarn --cwd ui install
            npx yarn --cwd ui jest
      - run:
          name: Build (jar)
          command: ./gradlew quarkusBuild
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - store_artifacts:
          path: build/libs/lcm-sayu-1.0.0-SNAPSHOT.jar

  native:
    executor: linux-executor
    steps:
      - checkout
      - openjdk-install/openjdk:
          version: 11
      - run:
          name: Install GraalVM
          command: curl https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-amd64-20.2.0.tar.gz -O -J -L && tar xfz graalvm-ce-java11-linux-amd64-20.2.0.tar.gz && mv graalvm-ce-java11-20.2.0 .graalvm && rm graalvm-ce-java11-linux-amd64-20.2.0.tar.gz
      - run:
          name: Install native-image
          command: $GRAALVM_HOME/bin/gu install native-image
      - run:
          name: Install yarn
          command: curl -o- -L https://yarnpkg.com/install.sh | bash
      - run:
          name: Install npm
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v14.10.1
            nvm alias default v14.10.1
      - run:
          name: Build (Native)
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npx yarn --cwd ui install
            npx yarn --cwd ui deploy
            cp -rf ui/static src/main/resources/META-INF/resources/static
            ./gradlew build -Dquarkus.package.type=native
          no_output_timeout: 15m
      - persist_to_workspace:
          root: .
          paths:
            - build/lcm-sayu-1.0.0-SNAPSHOT-runner
      - store_artifacts:
          path: build/lcm-sayu-1.0.0-SNAPSHOT-runner

  create-docker-image:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Copy Dockerfile to build dir
          command: cp src/main/docker/Dockerfile.native-image ~/project/build/
      - run:
          name: Build docker image
          command: |
            docker build --build-arg username=${DB_USERNAME} --build-arg password=${DB_PASSWORD} --build-arg url=${DB_URL} --build-arg port=${DB_PORT} --build-arg name=${DB_NAME} -f build/Dockerfile.native-image -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:latest build
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:latest
      - persist_to_workspace:
          root: .
          paths:
            - docker-image

  push-docker-image-and-update:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:latest"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
      - run:
          name: Update ECS service
          command: |
            aws --region $AWS_DEFAULT_REGION ecs update-service --force-new-deployment --service lcm-sayu-service-dev --cluster lcm-sayu-cluster-dev

workflows:
  version: 2
  buildjar-and-buildnative:
    jobs:
        - build:
            filters:
              branches:
                only: master
        - native:
            filters:
              branches:
                only: master
            requires:
              - build
        - create-docker-image:
            filters:
              branches:
                only: master
            requires:
              - native
        - push-docker-image-and-update:
            filters:
              branches:
                only: master
            requires:
              - create-docker-image
